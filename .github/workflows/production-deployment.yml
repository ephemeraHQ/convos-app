name: Production Deployment

on:
  push:
    branches:
      - production # Triggers on push to the production branch

# Ensure only one deployment workflow runs at a time for production
concurrency:
  group: "production-deployment"
  cancel-in-progress: true # It's okay to cancel in-progress deployments if a newer commit comes in

permissions:
  id-token: write # For EAS Build
  contents: read # For checkout

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout production branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to access parent commits

      - name: Extract Meaningful Commit Messages
        id: commit_messages
        run: |
          # HEAD is the merge commit on the production branch
          # HEAD^1 is the first parent (previous state of production)
          # HEAD^2 is the second parent (tip of main that was merged)
          # This command gets the subject of commits from main introduced in this merge
          # It formats them as "- Subject" and handles multi-line messages for the output
          # It also reverses the order to show oldest first, newest last.
          MESSAGES=$(git log --pretty="format:- %s" HEAD^1..HEAD^2 --reverse)
          if [ -z "$MESSAGES" ]; then
            # If no distinct commits (e.g., main was already merged or only fast-forward if that was allowed)
            # Fallback to the merge commit's subject
            MESSAGES="Changes from merge: $(git log -1 --pretty=%s)"
          fi
          # Escape for multiline shell output to GITHUB_OUTPUT and EAS message
          MESSAGES="${MESSAGES//'%'/'%25'}"
          MESSAGES="${MESSAGES//$'\n'/'%0A'}" # For GITHUB_OUTPUT
          MESSAGES="${MESSAGES//$'\r'/'%0D'}"
          echo "formatted_messages<<EOF" >> $GITHUB_OUTPUT
          echo "$MESSAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: "yarn"
          cache-dependency-path: yarn.lock
        env:
          SKIP_YARN_COREPACK_CHECK: "1"
      - run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

        # Need this here because the "Setup EAS" setup will execute npx expo config and will need the "build" folder of the plugin to be there
      - name: Build iOS notification extension plugin
        run: |
          yarn plugins:build:notification-service-extension

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          packager: yarn
          eas-cache: true
          patch-watchers: true

      - name: Build and Submit iOS production
        run: |
          echo "EAS Build Message Content:"
          # For the actual EAS command, we need to replace %0A with actual newlines for readability if supported,
          # or keep as a long string. EAS CLI message is a single string.
          # Let's prepare a version for the CLI command.
          CLI_MESSAGE=$(echo "${{ steps.commit_messages.outputs.formatted_messages }}" | sed 's/%0A/\n/g')
          # Truncate if too long, EAS might have a limit (e.g. 250 chars, adjust as needed)
          # This example truncates to 240 chars to be safe, adding "..."
          MAX_LEN=240
          if [ ${#CLI_MESSAGE} -gt $MAX_LEN ]; then
            CLI_MESSAGE="$(echo "$CLI_MESSAGE" | cut -c 1-$((MAX_LEN-3)))..."
          fi
          echo "$CLI_MESSAGE"

          # The EAS build will be associated with this specific commit.
          eas build --platform ios --profile production --non-interactive --auto-submit --message "$CLI_MESSAGE"
