name: Preview Deployment

on:
  workflow_dispatch:
    inputs:
      force_native_build:
        description: "Force native build (will ignore check-changes logic if re-enabled)"
        type: boolean
        default: true
        required: true

  push:
    branches:
      - main
    paths:
      - "**.ts"
      - "**.tsx"
      - "assets/**"
      - "package.json"
      - "app.config.ts"
      - "versions.json"
      - "yarn.lock"
      - "i18n/**"
      - "patches/**"
      - "index.js"
      - "google-services/**"

# Ensure only one workflow runs at a time
concurrency:
  group: "preview-deployment-${{ github.ref }}"
  cancel-in-progress: true

# Permissions might be needed if you decide to commit preview build numbers later,
# but for now, not committing them back.
permissions:
  contents: write

jobs:
  # check-changes:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     has_native_changes: ${{ steps.check-changes.outputs.has_native_changes }}
  #     commit_message: ${{ steps.commit_msg.outputs.message }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 2

  #     - name: Get Commit Message
  #       id: commit_msg
  #       run: |
  #         # Escape the commit message and store it in a variable
  #         COMMIT_MESSAGE=$(git log -1 --pretty=%B)
  #         # Properly escape the message for GitHub Actions output
  #         COMMIT_MESSAGE="${COMMIT_MESSAGE//'%'/'%25'}"
  #         COMMIT_MESSAGE="${COMMIT_MESSAGE//$'\n'/'%0A'}"
  #         COMMIT_MESSAGE="${COMMIT_MESSAGE//$'\r'/'%0D'}"
  #         echo "message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT

  #     - name: Check for native changes
  #       id: check-changes
  #       run: |
  #         if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.force_native_build }}" == "true" ]]; then
  #           echo "has_native_changes=true" >> $GITHUB_OUTPUT
  #         elif git diff --name-only HEAD^ HEAD | grep -E "package.json|app.config.ts|patches/|google-services/|yarn.lock|eas.json"; then
  #           echo "has_native_changes=true" >> $GITHUB_OUTPUT
  #         else
  #           echo "has_native_changes=false" >> $GITHUB_OUTPUT
  #         fi

  ios-preview-build:
    # needs: [check-changes]
    # if: needs.check-changes.outputs.has_native_changes == 'true'
    runs-on: ubuntu-latest
    outputs:
      ios_preview_build_number: ${{ steps.update_versions_json_preview.outputs.new_build_number }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          token: ${{ secrets.PAT_GITHUB }}
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: "yarn"
          cache-dependency-path: yarn.lock
        env:
          SKIP_YARN_COREPACK_CHECK: "1"
      - run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot (Preview Build)"
          git config --global user.email "github-actions-bot-preview@users.noreply.github.com"

      - name: Update iOS Preview Build Number in versions.json
        id: update_versions_json_preview
        run: |
          node scripts/update-versions.js --platform=ios --env=preview
          # The script outputs 'new_build_number'

      - name: Commit and Push versions.json
        run: |
          if ! git diff --quiet versions.json; then
            echo "versions.json was updated. Committing and pushing..."
            git add versions.json
            COMMIT_MSG="chore: Update iOS preview build number to ${{ steps.update_versions_json_preview.outputs.new_build_number }}"
            git commit -m "$COMMIT_MSG"
            git push origin ${{ github.ref_name }}
          else
            echo "versions.json was not changed. No commit needed."
          fi

      - name: Update app.config.ts with New iOS Preview Build Number (local to runner)
        id: update_app_config_preview
        run: |
          NEW_BUILD_NUM_PREVIEW=${{ steps.update_versions_json_preview.outputs.new_build_number }}
          if [ -z "$NEW_BUILD_NUM_PREVIEW" ]; then
            echo "Error: Failed to get new_build_number from update_versions_json_preview step."
            exit 1
          fi
          echo "New iOS Preview build number for this build is: $NEW_BUILD_NUM_PREVIEW"
          node scripts/update-app-config-buildnum.js --platform=ios --env=preview --buildNumber=$NEW_BUILD_NUM_PREVIEW
          echo "app.config.ts updated locally for preview build."

      # Need this here because the "Setup EAS" setup will execute npx expo config and will need the "build" folder of the plugin to be there
      - name: Build iOS notification extension plugin
        run: |
          yarn plugins:build:notification-service-extension

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          packager: yarn
          eas-cache: true
          patch-watchers: true # Prevents ENOSPC errors on Ubuntu runners

      - name: Build and submit Preview to store
        run: |
          # EAS will now use the app.config.ts that has been locally modified
          # with the incremented preview build number.
          # EXPO_ENV=preview should be set for eas build if your app.config.ts relies on it
          # to pick the right settings block. EAS CLI often does this automatically based on profile.
          eas build --platform ios --profile preview --non-interactive --auto-submit

      # - name: Resolve Sentry Issues
      #   run: |
      #     eas env:exec --environment preview 'sentry-cli issues resolve --all --project convos-app-react-native --org converse'

  # ota-update:
  #   needs: [check-changes]
  #   if: needs.check-changes.outputs.has_native_changes == 'false'
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version-file: .nvmrc
  #         cache: "yarn"
  #         cache-dependency-path: yarn.lock
  #       env:
  #         SKIP_YARN_COREPACK_CHECK: "1"
  #     - run: corepack enable

  #     - name: Install dependencies
  #       run: yarn install --immutable

  #     - name: Setup EAS
  #       uses: expo/expo-github-action@v8
  #       with:
  #         eas-version: latest
  #         token: ${{ secrets.EXPO_TOKEN }}
  #         packager: yarn
  #         eas-cache: true
  #         patch-watchers: true # Prevents ENOSPC errors on Ubuntu runners

  #     - name: Install Sentry CLI
  #       run: npm install -g @sentry/cli

  #     - name: Run EAS Update
  #       run: |
  #         eas update --channel=preview --message "${{ needs.check-changes.outputs.commit_message }}" --non-interactive --environment=preview

  #     - name: Upload Sourcemaps to Sentry
  #       run: |
  #         eas env:exec --environment preview -- 'npx sentry-expo-upload-sourcemaps dist'

  #     # - name: Resolve Sentry Issues
  #     #   run: |
  #     #     eas env:exec --environment preview 'sentry-cli issues resolve --all --project convos-app-react-native --org converse'
