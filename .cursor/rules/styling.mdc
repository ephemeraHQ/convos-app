---
description: 
globs: 
alwaysApply: true
---
This file contains rules about styling components in our codebase. Each rule is followed by a small example showing good and bad practices.

- It's okay to put inline style in the "style" props of a component. Only extract styles when it's starting to get chaotic.

```typescript
// ✅ Good for simple styling n style={{ marginBottom: 8 }}>Simple element</Text>

// ✅ Consider extracting when styles get complex
<VStack
  style={{
    padding: theme.spacing.md,
    margin:,
    borderRadius: 8,
    backgroundColor: theme.colors.card,
    // And many more style properties...
  }}
>
  <Text>Content</Text>
</VStack>
```

- Use the dollar sign ($) prefix for style objects defined outside of components.

```typescript
// ❌ Bad
const containerStyle = {
  padding: 16,
  margin: 8,
}

// ✅ Good
const $container = {
  padding: 16,
  margin: 8,
}
```

- Use ThemedStyle<ViewStyle> for theme-dependent styles that need access to theme variables.

```typescript
// ❌ Bad
const $container = {
  backgroundColor: "#ffffff",
  padding: 16,
}

// ✅ Good
const $container: ThemedStyle<ViewStyle> = ({ colors, spacing }) => ({
  backgroundColor: colors.background,
  padding: spacing.md,
})

// In component
<VStack style={themed($container)} />
```

- Always use our theme from use-app-theme.ts

```typescript
// ❌ Bad: Using hardcoded values
<Text style={{ color: "#FF0000", fontSize: 16 }}>Error</Text>

// ✅ Good: Using theme values
function Component() {
  const { theme } = useAppTheme()

  return (
    <Text style={{ color: theme.colors.error, fontSize: theme.typography.md }}>
      Error
    </Text>
  )
}
```

- Use styles.ts for common styling patterns that are reused across components.

```typescript
// ❌ Bad: Repeating common styles
<View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>
  <Content />
</View>

// ✅ Good: Using global styles from styles.ts
import { $globalStyles } from "@/theme/styles"

<View style={[$globalStyles.flex1, $globalStyles.center]}>
  <Content />
</View>
```

- Append "Override" to style props that override default component styles.

```typescript
// In custom component
type IButtonProps = {
  style?: StyleProp<ViewStyle>;
  textStyle?: StyleProp<TextStyle>;
}

// Usage with clear naming conventions
<CustomButton
  style={$buttonOverride}
  textStyle={$textOverride}
/>

// Another example with themed styles
const $cardOverride: ThemedStyle<ViewStyle> = ({ colors }) => ({
  backgroundColor: colors.primaryBackground,
  borderWidth: 0,
})

<Card style={themed($cardOverride)}>
  <CardContent />
</Card>
```
